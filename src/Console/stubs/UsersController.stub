<?php

namespace DummyNamespace;

use App\User;
use Illuminate\Http\Request;
use Ml\Requests\Ajax\UserRequest;
use Ml\Response\Result;
use Spatie\Permission\Models\Role;

class UsersController extends BaseController
{
    //
    public function index()
    {
        return $this->backend_view('users.index');
    }

    /**
     *
     * @param Request $request
     * @param Result $result
     * @return array
     */
    public function list(Request $request, Result $result)
    {
        $query = User::query();
        $queryFields = ['name', 'email'];
        foreach ($queryFields as $queryField) {
            if ($request->get($queryField)) {
                $query = $query->where($queryField, $request->get($queryField));
            }
        }

        //每页数量
        $per_page = $request->get('limit') ? $request->get('limit') : config('admin.paginate.limit');;
        if ($per_page > 100) {
            //限制最大100
            $per_page = 100;
        }
        $query = $query->orderBy('id', 'desc');
        $query->with('roles');

        $data = $query->paginate($per_page);
        $data->withPath($request->fullUrl());

//        $userRoles = $user->roles()->pluck('name', 'name')->toArray();

        $result->succeed($data);

        return $result->toArray();
    }

    /**
     * 新增页面
     * @param User $user
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function create(User $user)
    {
        $roles = Role::get()->pluck('name', 'remarks')->toArray();
        $userRoles = [];

        return $this->backend_view('users.create_edit', compact('user', 'roles', 'userRoles'));
    }

    /**
     * 添加
     * @param UserRequest $request
     * @param Result $result
     * @return array
     */
    public function store(UserRequest $request, Result $result)
    {

        try {
            $data = $request->only(['name', 'username', 'email', 'password', 'status', 'sex', 'bool_admin']);

            $data['password'] = bcrypt($data['password']);

            $user = User::create($data);

            $roles = $request->input('roles') ? $request->input('roles') : [];
            $user->assignRole($roles);
            // 要求：User和配置的 auth.default.guard 对应的provider 使用的 user model 为同一个类
            //（因为 Role 默认的guard为配置）

            $result->succeed($user);
        } catch (\Exception $exception) {
            $result->failed($exception->getMessage());
        }

        return $result->toArray();

    }

    /**
     * 编辑
     *
     * @param $id
     * @return mixed
     */
    public function edit($id)
    {
        $user = User::find($id);
        $roles = Role::get()->pluck('name', 'remarks')->toArray();
        $userRoles = $user->roles()->pluck('name', 'name')->toArray();


        return $this->backend_view('users.create_edit', compact('user', 'roles', 'userRoles'));
    }

    /**
     * 更新
     *
     * @param UserRequest $request
     * @param $id
     * @param Result $result
     * @return array
     */
    public function update(UserRequest $request, $id, Result $result)
    {
        $user = User::find($id);
        $data = $request->only(['name', 'username', 'email', 'password', 'status', 'sex', 'bool_admin']);
        $user->update($data);
//        \Log::info(__FUNCTION__.':'.print_r($user,true));
        $roles = $request->input('roles') ? $request->input('roles') : [];
        \Log::info(__FUNCTION__ . ':' . print_r($roles, true));
        $user->syncRoles($roles);

        $result->succeed($user);

        return $result->toArray();
    }

    /**
     * 删除
     *
     * @param $id
     * @param Result $result
     * @return array
     */
    public function destroy($id, Result $result)
    {

        $user = User::find($id);
        if (!$user) {
            $result->failed('已删除或不存在');
        } else {
            //执行删除
            $del = $user->delete();
            if ($del) {
                $result->succeed($user);
            } else {
                $result->failed('删除失败');
            }
        }

        return $result->toArray();
    }


    /**
     * 批量删除
     * @param Request $request
     * @param Result $result
     * @return array
     */
    public function destroyBat(Request $request, Result $result)
    {
        $ids = $request->get('ids');
        if ($ids && is_array($ids)) {
            $dels = User::whereIn('id', $ids)->delete();
            if ($dels > 0) {
                $result->succeed();
            } else {
                $result->failed('删除失败');
            }
        } else {
            $result->failed('参数错误');
        }

        return $result->toArray();
    }
}
